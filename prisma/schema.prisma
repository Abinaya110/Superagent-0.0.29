generator client {
  provider  = "prisma-client-py"
  interface = "sync"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

enum AgentType {
  REACT
  PLANSOLVE
  OPENAI
}

enum AgentMemoryAuthorType {
  HUMAN
  AI
}

enum DocumentType {
  TXT
  PDF
  CSV
  YOUTUBE
  OPENAPI
  URL
  MARKDOWN
  FIRESTORE
  PSYCHIC
}

enum ToolType {
  BROWSER
  SEARCH
  WOLFRAM_ALPHA
  REPLICATE
}

model User {
  id         String       @id @default(cuid()) @db.VarChar(255)
  email      String       @unique @db.VarChar(255)
  password   String?      @db.VarChar(255)
  name       String?      @db.VarChar(255)
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
  deletedAt  DateTime?
  profile    Profile?
  Agent      Agent[]
  ApiToken   ApiToken[]
  Document   Document[]
  Prompt     Prompt[]
  Tool       Tool[]
  AgentTrace AgentTrace[]
}

model Profile {
  id       String @id @default(cuid()) @db.VarChar(255)
  userId   String @unique @db.VarChar(255)
  user     User   @relation(fields: [userId], references: [id])
  metadata Json?  @default("{}")
}

model Document {
  id            String          @id @default(cuid()) @db.VarChar(255)
  userId        String          @db.VarChar(255)
  user          User            @relation(fields: [userId], references: [id])
  type          DocumentType    @default(TXT)
  url           String?         @db.Text()
  name          String
  splitter      Json?
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  index         Json?
  authorization Json?
  metadata      Json?
  Agent         Agent[]
  AgentDocument AgentDocument[]
}

model Agent {
  id            String          @id @default(cuid()) @db.VarChar(255)
  userId        String          @db.VarChar(255)
  user          User            @relation(fields: [userId], references: [id])
  document      Document?       @relation(fields: [documentId], references: [id])
  documentId    String?         @db.VarChar(255)
  tool          Tool?           @relation(fields: [toolId], references: [id])
  toolId        String?         @db.VarChar(255)
  prompt        Prompt?         @relation(fields: [promptId], references: [id])
  promptId      String?         @db.VarChar(255)
  name          String
  type          AgentType       @default(REACT)
  llm           Json            @default("{ \"provider\": \"openai-chat\", \"model\": \"gpt-3.5-turbo\" }")
  hasMemory     Boolean         @default(false)
  AgentMemory   AgentMemory[]
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  AgentTrace    AgentTrace[]
  AgentDocument AgentDocument[]
  AgentTool     AgentTool[]
}

model ApiToken {
  id          String @id @default(cuid()) @db.VarChar(255)
  userId      String @db.VarChar(255)
  user        User   @relation(fields: [userId], references: [id])
  description String @db.VarChar(255)
  token       String
}

model AgentMemory {
  id        String                @id @default(cuid()) @db.VarChar(255)
  agentId   String                @db.VarChar(255)
  agent     Agent                 @relation(fields: [agentId], references: [id], onDelete: Cascade)
  author    AgentMemoryAuthorType @default(HUMAN)
  message   String                @db.Text()
  createdAt DateTime?             @default(now())
  updatedAt DateTime?             @updatedAt
  deletedAt DateTime?
}

model AgentTrace {
  id        String    @id @default(cuid()) @db.VarChar(255)
  userId    String    @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [id])
  agentId   String    @db.VarChar(255)
  data      Json
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Prompt {
  id              String    @id @default(cuid()) @db.VarChar(255)
  name            String
  template        String    @db.Text()
  input_variables Json
  userId          String    @db.VarChar(255)
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?
  Agent           Agent[]
}

model AgentDocument {
  id         String    @id @default(cuid()) @db.VarChar(255)
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?   @db.VarChar(255)
  agentId    String    @db.VarChar(255)
  agent      Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?
}

model Tool {
  id        String      @id @default(cuid()) @db.VarChar(255)
  name      String
  type      ToolType?
  metadata  Json?
  userId    String      @db.VarChar(255)
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  Agent     Agent[]
  AgentTool AgentTool[]
}

model AgentTool {
  id        String    @id @default(cuid()) @db.VarChar(255)
  tool      Tool?     @relation(fields: [toolId], references: [id])
  toolId    String?   @db.VarChar(255)
  agentId   String    @db.VarChar(255)
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}
